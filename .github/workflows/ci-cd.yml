name: Flutter CI/CD with Firebase App Distribution

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'

jobs:
  # Code quality and testing
  analyze:
    name: Code Analysis & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  # Android Build and Distribution
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: analyze
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Setup Android signing
        if: github.event_name == 'release'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/keystore.jks
          echo "storeFile=keystore.jks" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties

      - name: Build Android APK (Debug)
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: flutter build apk --debug

      - name: Build Android APK (Release)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: flutter build apk --release

      - name: Build Android App Bundle (Release)
        if: github.event_name == 'release'
        run: flutter build appbundle --release

      - name: Upload APK artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/*.apk

      - name: Upload App Bundle artifact
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/*.aab

  # iOS Build and Distribution
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: analyze
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Setup iOS signing
        if: github.event_name == 'release'
        run: |
          # Create provisioning profile
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 -d > ios/Runner.mobileprovision
          
          # Import certificate
          echo "${{ secrets.IOS_CERTIFICATE }}" | base64 -d > ios/certificate.p12
          security create-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
          security import ios/certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" ~/Library/Keychains/build.keychain

      - name: Build iOS (Debug)
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: flutter build ios --debug --no-codesign

      - name: Build iOS (Release)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'release'
        run: flutter build ios --release --no-codesign

      - name: Build iOS Archive
        if: github.event_name == 'release'
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath Runner.xcarchive \
            archive

      - name: Export IPA
        if: github.event_name == 'release'
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath Runner.xcarchive \
            -exportPath . \
            -exportOptionsPlist Runner/ExportOptions.plist

      - name: Upload iOS artifact
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/*.ipa

  # Firebase App Distribution
  distribute-firebase:
    name: Distribute to Firebase
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./artifacts/android

      - name: Download iOS IPA
        if: needs.build-ios.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./artifacts/ios

      - name: Distribute Android to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers
          file: ./artifacts/android/app-release.apk
          releaseNotes: |
            🚀 New build from commit: ${{ github.sha }}
            
            Changes in this build:
            ${{ github.event.head_commit.message }}

      - name: Distribute iOS to Firebase
        if: needs.build-ios.result == 'success'
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers
          file: ./artifacts/ios/Runner.ipa
          releaseNotes: |
            🚀 New build from commit: ${{ github.sha }}
            
            Changes in this build:
            ${{ github.event.head_commit.message }}

  # Production Release
  release-production:
    name: Release to Production
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android App Bundle
        uses: actions/download-artifact@v4
        with:
          name: android-aab
          path: ./artifacts/android

      - name: Download iOS IPA
        if: needs.build-ios.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./artifacts/ios

      - name: Upload to Google Play Store
        if: github.event_name == 'release'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.example.firebase_app_distribution
          releaseFiles: ./artifacts/android/app-release.aab
          track: production
          status: completed
          whatsNewDirectory: fastlane/metadata/android

      - name: Upload to App Store
        if: needs.build-ios.result == 'success' && github.event_name == 'release'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ./artifacts/ios/Runner.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [distribute-firebase, release-production]
    if: always()
    
    steps:
      - name: Notify Slack on Success
        if: needs.distribute-firebase.result == 'success' || needs.release-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#mobile-releases'
          text: |
            ✅ Flutter App Distribution Successful!
            
            🔗 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            📱 Platform: Android/iOS
            🚀 Type: ${{ github.event_name == 'release' && 'Production Release' || 'Firebase Distribution' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.distribute-firebase.result == 'failure' || needs.release-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#mobile-releases'
          text: |
            ❌ Flutter App Distribution Failed!
            
            🔗 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            🚨 Please check the workflow logs
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
