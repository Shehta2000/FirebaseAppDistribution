name: Simple APK & IPA Build

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  FLUTTER_VERSION: '3.24.3'
  JAVA_VERSION: '17'

jobs:
  build-android:
    name: 🤖 Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🏗️ Build APK
        run: |
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          echo "Building APK in $BUILD_TYPE mode..."
          if [ "$BUILD_TYPE" == "release" ]; then
            flutter build apk --release
          else
            flutter build apk --debug
          fi

      - name: 📱 Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.event.inputs.build_type || 'release' }}
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 30

  build-ios:
    name: 🍎 Build iOS IPA
    runs-on: macos-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🔧 Setup iOS environment
        run: |
          # Set Flutter root environment variable
          echo "FLUTTER_ROOT=$(which flutter | sed 's|/bin/flutter||')" >> $GITHUB_ENV
          
          # Clean iOS build
          flutter clean
          flutter pub get

      - name: 🏗️ Build iOS
        run: |
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          echo "Building iOS in $BUILD_TYPE mode..."
          echo "Flutter root: $FLUTTER_ROOT"
          flutter build ios --$BUILD_TYPE --no-codesign

      - name: 📦 Create IPA
        run: |
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          
          if [ "$BUILD_TYPE" == "release" ]; then
            APP_PATH="build/ios/iphoneos/Runner.app"
          else
            APP_PATH="build/ios/iphonesimulator/Runner.app"
          fi
          
          if [ -d "$APP_PATH" ]; then
            echo "✅ Found Runner.app at: $APP_PATH"
            mkdir -p Payload
            cp -r "$APP_PATH" Payload/
            zip -r "firebase-app-distribution-${BUILD_TYPE}.ipa" Payload
            echo "✅ IPA created successfully"
            ls -la *.ipa
          else
            echo "❌ Runner.app not found at $APP_PATH"
            echo "🔍 Searching for Runner.app..."
            find build -name "Runner.app" -type d || echo "No Runner.app found"
          fi

      - name: 📱 Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-${{ github.event.inputs.build_type || 'release' }}
          path: "*.ipa"
          retention-days: 30
        continue-on-error: true

  pull-request-checks:
    name: 🔍 Pull Request Checks
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🔍 Analyze code
        run: flutter analyze

      - name: ✅ Run tests
        run: flutter test

      - name: 📝 Check formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: 💬 Comment PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🔍 Pull Request Check Results
            
            - ✅ Code analysis completed
            - ✅ Tests executed
            - ✅ Code formatting verified
            
            Your PR is ready for review! 🚀`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  summary:
    name: 📊 Build Summary
    if: always() && github.event_name != 'pull_request'
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Create Summary
        run: |
          echo "## 🎉 Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 **Android APK**: ${{ needs.build-android.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 **iOS IPA**: ${{ needs.build-ios.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download Files:" >> $GITHUB_STEP_SUMMARY
          echo "Go to **Artifacts** section below to download APK/IPA files" >> $GITHUB_STEP_SUMMARY

  pr-summary:
    name: 📊 PR Summary
    if: always() && github.event_name == 'pull_request'
    needs: [pull-request-checks]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Create PR Summary
        run: |
          echo "## 🔍 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Code Analysis**: ${{ needs.pull-request-checks.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Tests**: ${{ needs.pull-request-checks.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 **Formatting**: ${{ needs.pull-request-checks.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ Ready for merge!" >> $GITHUB_STEP_SUMMARY
