# Simple Podfile for Flutter
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  # Try to find Flutter root from environment or default location
  flutter_root = ENV['FLUTTER_ROOT']
  if flutter_root && File.exist?(flutter_root)
    return flutter_root
  end
  
  # Check common Flutter locations
  possible_roots = [
    '/usr/local/flutter',
    '/opt/flutter',
    File.expand_path('~/flutter'),
    File.expand_path('~/development/flutter')
  ]
  
  possible_roots.each do |root|
    if File.exist?(File.join(root, 'bin', 'flutter'))
      return root
    end
  end
  
  # Fallback - try to get from generated config if it exists
  generated_config = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  if File.exist?(generated_config)
    File.foreach(generated_config) do |line|
      matches = line.match(/FLUTTER_ROOT\=(.*)/)
      return matches[1].strip if matches
    end
  end
  
  # Last resort - assume flutter is in PATH
  return `which flutter`.strip.gsub('/bin/flutter', '') rescue '/usr/local/flutter'
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Set minimum iOS deployment target for all pods
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
    end
  end
end
